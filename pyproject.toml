[project]
name = "eventy"
version = "0.1.0"
description = ""
authors = [
    {name = "Your Name",email = "you@example.com"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "httpx>=0.25.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "pydantic (>=2.11.7,<3.0.0)",
    "websockets (>=15.0.1,<16.0.0)"
]

[tool.poetry]
packages = [{include = "eventy"}]

[tool.poetry.extras]
server = [
    "fastapi", "uvicorn", "pydantic"
]

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
pylint = "^3.3.8"
pytest = "^8.4.2"
pytest-asyncio = "^1.1.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pylint.main]
# Specify a score threshold to be exceeded before program exits with error.
fail-under = 8.0

# Files or directories to be skipped. They should be base names, not paths.
ignore = ["CVS"]

# Add files or directories matching the regex patterns to the ignore-list.
ignore-paths = ["^tests/.*$"]

# Use multiple processes to speed up Pylint.
jobs = 0

# Minimum Python version to use for version dependent checks.
py-version = "3.12"

# Discover python modules and packages in the file system subtree.
recursive = true

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "T"]

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Naming style matching correct module names.
module-naming-style = "snake_case"

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 8

# Maximum number of attributes for a class (see R0902).
max-attributes = 12

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 12

# Maximum number of locals for function / method body.
max-locals = 15

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return statements in function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 1

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = "LF"

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit.
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 120

# Maximum number of lines in a module.
max-module-lines = 1000

[tool.pylint.imports]
# List of modules that can be imported at any level, not just the top level.
allow-any-import-level = ["asyncio"]

[tool.pylint.logging]
# The type of string formatting that logging methods do.
logging-format-style = "old"

[tool.pylint.messages_control]
# Only show warnings with the listed confidence levels.
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

# Disable the message, report, category or checker with the given id(s).
disable = [
    "C0114",  # missing-module-docstring
    "C0116",  # missing-function-docstring
    "R0913",  # too-many-arguments
    "R0917",  # too-many-positional-arguments
    "R0902",  # too-many-instance-attributes
    "W0603",  # global-statement
    "W0718",  # broad-exception-caught
    "C0415",  # import-outside-toplevel
    "missing-class-docstring", 
    "too-few-public-methods",
    "duplicate-code",
    "cyclic-import",
    "logging-fstring-interpolation",
    "unused-import",
    "trailing-whitespace",
    "line-too-long",
    "redefined-builtin",
    "unused-argument",
    "unspecified-encoding",
    "no-else-return"
]

# Enable the message, report, category or checker with the given id(s).
enable = ["useless-suppression"]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10.
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

# Template used to display messages.
msg-template = "{path}:{line}:{column}: {msg_id}: {msg} ({symbol})"

# Set the output format.
output-format = "text"

# Tells whether to display a full report or only the messages.
reports = false

# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = true

# Signatures are removed from the similarity computation
ignore-signatures = true

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

[tool.pylint.typecheck]
# List of decorators that produce context managers.
contextmanager-decorators = ["contextlib.contextmanager"]

# List of members which are set dynamically and missed by pylint inference system.
generated-members = []

# Tells whether missing members accessed in mixin class should be ignored.
ignore-mixin-members = true

# Tells whether to warn about missing members when the owner of the attribute is inferred to be None.
ignore-none = true

# This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring.
ignore-on-opaque-inference = true

# List of symbolic message names to ignore for Mixin class.
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]

# List of class names for which member attributes should not be checked.
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]

# Show a hint with possible names when a member name was not found.
missing-member-hint = true

# The minimum edit distance a name should have in order to be considered a similar match for a missing member name.
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration when showing a hint for a missing member.
missing-member-max-choices = 1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins.
additional-builtins = []

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# List of names allowed to shadow builtins
allowed-redefined-builtins = ["id", "type", "input", "open"]

# List of strings which can identify a callback function by name.
callbacks = ["cb_", "_cb"]

# A regular expression matching the name of dummy variables.
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored.
ignored-argument-names = "_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
init-import = false

# List of qualified module names which can have objects that can redefine builtins.
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]
